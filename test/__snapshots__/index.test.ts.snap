// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`No stack pattern release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - if: \${{ matrix.assumeRole == 'false' }}
        name: Configure AWS Credentials
        run: |-
          
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
      - if: \${{ matrix.assumeRole == 'true' }}
        name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Deployment
        run: yarn deploy:workflow
      - if: \${{ matrix.hasPostDeployTask == 'true' }}
        name: Post Deployment
        run: yarn \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
          - environment: staging
            accessKeyIdSecretName: staging-secret-1
            secretAccessKeySecretName: staging-secret-2
            region: staging-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
        environment:
          - dev
          - staging
"
`;

exports[`a new task added for deployment in workflow tasks 1`] = `
"{
  \\"tasks\\": {
    \\"build\\": {
      \\"name\\": \\"build\\",
      \\"description\\": \\"Full release build\\",
      \\"steps\\": [
        {
          \\"spawn\\": \\"default\\"
        },
        {
          \\"spawn\\": \\"pre-compile\\"
        },
        {
          \\"spawn\\": \\"compile\\"
        },
        {
          \\"spawn\\": \\"post-compile\\"
        },
        {
          \\"spawn\\": \\"test\\"
        },
        {
          \\"spawn\\": \\"package\\"
        }
      ]
    },
    \\"bump\\": {
      \\"name\\": \\"bump\\",
      \\"description\\": \\"Bumps version based on latest git tag and generates a changelog entry\\",
      \\"env\\": {
        \\"OUTFILE\\": \\"package.json\\",
        \\"CHANGELOG\\": \\"dist/changelog.md\\",
        \\"BUMPFILE\\": \\"dist/version.txt\\",
        \\"RELEASETAG\\": \\"dist/releasetag.txt\\"
      },
      \\"steps\\": [
        {
          \\"builtin\\": \\"release/bump-version\\"
        }
      ],
      \\"condition\\": \\"! git log --oneline -1 | grep -q \\\\\\"chore(release):\\\\\\"\\"
    },
    \\"bundle\\": {
      \\"name\\": \\"bundle\\",
      \\"description\\": \\"Prepare assets\\"
    },
    \\"clobber\\": {
      \\"name\\": \\"clobber\\",
      \\"description\\": \\"hard resets to HEAD of origin and cleans the local repo\\",
      \\"env\\": {
        \\"BRANCH\\": \\"$(git branch --show-current)\\"
      },
      \\"steps\\": [
        {
          \\"exec\\": \\"git checkout -b scratch\\",
          \\"name\\": \\"save current HEAD in \\\\\\"scratch\\\\\\" branch\\"
        },
        {
          \\"exec\\": \\"git checkout $BRANCH\\"
        },
        {
          \\"exec\\": \\"git fetch origin\\",
          \\"name\\": \\"fetch latest changes from origin\\"
        },
        {
          \\"exec\\": \\"git reset --hard origin/$BRANCH\\",
          \\"name\\": \\"hard reset to origin commit\\"
        },
        {
          \\"exec\\": \\"git clean -fdx\\",
          \\"name\\": \\"clean all untracked files\\"
        },
        {
          \\"say\\": \\"ready to rock! (unpushed commits are under the \\\\\\"scratch\\\\\\" branch)\\"
        }
      ],
      \\"condition\\": \\"git diff --exit-code > /dev/null\\"
    },
    \\"compile\\": {
      \\"name\\": \\"compile\\",
      \\"description\\": \\"Only compile\\"
    },
    \\"default\\": {
      \\"name\\": \\"default\\",
      \\"description\\": \\"Synthesize project files\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"node .projenrc.js\\"
        }
      ]
    },
    \\"deploy\\": {
      \\"name\\": \\"deploy\\",
      \\"description\\": \\"Deploys your CDK app to the AWS cloud\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk deploy\\"
        }
      ]
    },
    \\"deploy:workflow\\": {
      \\"name\\": \\"deploy:workflow\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk deploy --require-approval never\\"
        }
      ]
    },
    \\"destroy\\": {
      \\"name\\": \\"destroy\\",
      \\"description\\": \\"Destroys your cdk app in the AWS cloud\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk destroy\\"
        }
      ]
    },
    \\"diff\\": {
      \\"name\\": \\"diff\\",
      \\"description\\": \\"Diffs the currently deployed app against your code\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk diff\\"
        }
      ]
    },
    \\"eject\\": {
      \\"name\\": \\"eject\\",
      \\"description\\": \\"Remove projen from the project\\",
      \\"env\\": {
        \\"PROJEN_EJECTING\\": \\"true\\"
      },
      \\"steps\\": [
        {
          \\"spawn\\": \\"default\\"
        }
      ]
    },
    \\"eslint\\": {
      \\"name\\": \\"eslint\\",
      \\"description\\": \\"Runs eslint against the codebase\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js\\"
        }
      ]
    },
    \\"package\\": {
      \\"name\\": \\"package\\",
      \\"description\\": \\"Creates the distribution package\\"
    },
    \\"post-compile\\": {
      \\"name\\": \\"post-compile\\",
      \\"description\\": \\"Runs after successful compilation\\",
      \\"steps\\": [
        {
          \\"spawn\\": \\"synth:silent\\"
        }
      ]
    },
    \\"post-upgrade\\": {
      \\"name\\": \\"post-upgrade\\",
      \\"description\\": \\"Runs after upgrading dependencies\\"
    },
    \\"pre-compile\\": {
      \\"name\\": \\"pre-compile\\",
      \\"description\\": \\"Prepare the project for compilation\\"
    },
    \\"release\\": {
      \\"name\\": \\"release\\",
      \\"description\\": \\"Prepare a release from \\\\\\"main\\\\\\" branch\\",
      \\"env\\": {
        \\"RELEASE\\": \\"true\\"
      },
      \\"steps\\": [
        {
          \\"exec\\": \\"rm -fr dist\\"
        },
        {
          \\"spawn\\": \\"bump\\"
        },
        {
          \\"spawn\\": \\"build\\"
        },
        {
          \\"spawn\\": \\"unbump\\"
        },
        {
          \\"exec\\": \\"git diff --ignore-space-at-eol --exit-code\\"
        }
      ]
    },
    \\"synth\\": {
      \\"name\\": \\"synth\\",
      \\"description\\": \\"Synthesizes your cdk app into cdk.out\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk synth\\"
        }
      ]
    },
    \\"synth:silent\\": {
      \\"name\\": \\"synth:silent\\",
      \\"description\\": \\"Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \\\\\\"yarn build\\\\\\")\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk synth > /dev/null\\"
        }
      ]
    },
    \\"test\\": {
      \\"name\\": \\"test\\",
      \\"description\\": \\"Run tests\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"jest --passWithNoTests --all --updateSnapshot\\"
        },
        {
          \\"spawn\\": \\"eslint\\"
        }
      ]
    },
    \\"test:update\\": {
      \\"name\\": \\"test:update\\",
      \\"description\\": \\"Update jest snapshots\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"jest --updateSnapshot\\"
        }
      ]
    },
    \\"test:watch\\": {
      \\"name\\": \\"test:watch\\",
      \\"description\\": \\"Run jest in watch mode\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"jest --watch\\"
        }
      ]
    },
    \\"unbump\\": {
      \\"name\\": \\"unbump\\",
      \\"description\\": \\"Restores version to 0.0.0\\",
      \\"env\\": {
        \\"OUTFILE\\": \\"package.json\\",
        \\"CHANGELOG\\": \\"dist/changelog.md\\",
        \\"BUMPFILE\\": \\"dist/version.txt\\",
        \\"RELEASETAG\\": \\"dist/releasetag.txt\\"
      },
      \\"steps\\": [
        {
          \\"builtin\\": \\"release/reset-version\\"
        }
      ]
    },
    \\"upgrade\\": {
      \\"name\\": \\"upgrade\\",
      \\"description\\": \\"upgrade dependencies\\",
      \\"env\\": {
        \\"CI\\": \\"0\\"
      },
      \\"steps\\": [
        {
          \\"exec\\": \\"npm-check-updates --dep dev --upgrade --target=minor --reject='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep optional --upgrade --target=minor --reject='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep peer --upgrade --target=minor --reject='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep prod --upgrade --target=minor --reject='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep bundle --upgrade --target=minor --reject='projen'\\"
        },
        {
          \\"exec\\": \\"yarn install --check-files\\"
        },
        {
          \\"exec\\": \\"yarn upgrade @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk esbuild eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit json-schema npm-check-updates standard-version ts-jest ts-node typescript @aws-cdk/core constructs @aws-cdk/assert @aws-cdk/assertions\\"
        },
        {
          \\"exec\\": \\"npx projen\\"
        },
        {
          \\"spawn\\": \\"post-upgrade\\"
        }
      ]
    },
    \\"upgrade-projen\\": {
      \\"name\\": \\"upgrade-projen\\",
      \\"description\\": \\"upgrade projen\\",
      \\"env\\": {
        \\"CI\\": \\"0\\"
      },
      \\"steps\\": [
        {
          \\"exec\\": \\"npm-check-updates --dep dev --upgrade --target=minor --filter='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep optional --upgrade --target=minor --filter='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep peer --upgrade --target=minor --filter='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep prod --upgrade --target=minor --filter='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep bundle --upgrade --target=minor --filter='projen'\\"
        },
        {
          \\"exec\\": \\"yarn install --check-files\\"
        },
        {
          \\"exec\\": \\"yarn upgrade projen\\"
        },
        {
          \\"exec\\": \\"npx projen\\"
        },
        {
          \\"spawn\\": \\"post-upgrade\\"
        }
      ]
    },
    \\"watch\\": {
      \\"name\\": \\"watch\\",
      \\"description\\": \\"Watches changes in your source code and rebuilds and deploys to the current account\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk deploy --hotswap\\"
        },
        {
          \\"exec\\": \\"cdk watch\\"
        }
      ]
    }
  },
  \\"env\\": {
    \\"PATH\\": \\"$(npx -c \\\\\\"node -e \\\\\\\\\\\\\\"console.log(process.env.PATH)\\\\\\\\\\\\\\"\\\\\\")\\"
  },
  \\"//\\": \\"~~ Generated by projen. To modify, edit .projenrc.js and run \\\\\\"npx projen\\\\\\".\\"
}
"
`;

exports[`assume role with default duration release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - if: \${{ matrix.assumeRole == 'false' }}
        name: Configure AWS Credentials
        run: |-
          
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
      - if: \${{ matrix.assumeRole == 'true' }}
        name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Deployment
        run: yarn deploy:workflow
      - if: \${{ matrix.hasPostDeployTask == 'true' }}
        name: Post Deployment
        run: yarn \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"true\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            roleToAssume: dev-role
            assumeRoleDurationSeconds: 300
        environment:
          - dev
"
`;

exports[`assume role with specified duration release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - if: \${{ matrix.assumeRole == 'false' }}
        name: Configure AWS Credentials
        run: |-
          
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
      - if: \${{ matrix.assumeRole == 'true' }}
        name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Deployment
        run: yarn deploy:workflow
      - if: \${{ matrix.hasPostDeployTask == 'true' }}
        name: Post Deployment
        run: yarn \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"true\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            roleToAssume: dev-role
            assumeRoleDurationSeconds: 1200
        environment:
          - dev
"
`;

exports[`environment added by invoking the addEnvironments release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - if: \${{ matrix.assumeRole == 'false' }}
        name: Configure AWS Credentials
        run: |-
          
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
      - if: \${{ matrix.assumeRole == 'true' }}
        name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Deployment
        run: yarn deploy:workflow
      - if: \${{ matrix.hasPostDeployTask == 'true' }}
        name: Post Deployment
        run: yarn \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
          - environment: staging
            accessKeyIdSecretName: staging-secret-1
            secretAccessKeySecretName: staging-secret-2
            region: staging-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
        environment:
          - dev
          - staging
"
`;

exports[`npm config set for each environments release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - if: \${{ matrix.assumeRole == 'false' }}
        name: Configure AWS Credentials
        run: |-
          
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
      - if: \${{ matrix.assumeRole == 'true' }}
        name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Setting NPM Config
        env:
          CONFIG_VALUE: \${{ matrix.environment }}
        run: npm config set stage $CONFIG_VALUE
      - name: Deployment
        run: yarn deploy:workflow
      - if: \${{ matrix.hasPostDeployTask == 'true' }}
        name: Post Deployment
        run: yarn \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
          - environment: staging
            accessKeyIdSecretName: staging-secret-1
            secretAccessKeySecretName: staging-secret-2
            region: staging-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
        environment:
          - dev
          - staging
"
`;

exports[`post deployment added in workflow tasks 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - if: \${{ matrix.assumeRole == 'false' }}
        name: Configure AWS Credentials
        run: |-
          
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
      - if: \${{ matrix.assumeRole == 'true' }}
        name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Deployment
        run: yarn deploy:workflow
      - if: \${{ matrix.hasPostDeployTask == 'true' }}
        name: Post Deployment
        run: yarn \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev1
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"true\\"
            postDeploymentScript: post-deploy
          - environment: dev2
            accessKeyIdSecretName: dev-secret-3
            secretAccessKeySecretName: dev-secret-4
            region: dev-aws-region-2
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
        environment:
          - dev1
          - dev2
"
`;

exports[`set the checkActiveDeployment flag release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - id: deployment-check
        uses: AminFazlMondo/check-deployed-environment@v1
        with:
          environment: \${{ matrix.environment }}
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - if: \${{ steps.deployment-check.outputs.has_active_deployment != 'true' }}
        name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - if: \${{ steps.deployment-check.outputs.has_active_deployment != 'true' }}
        name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - if: \${{ matrix.assumeRole == 'false' && steps.deployment-check.outputs.has_active_deployment != 'true' }}
        name: Configure AWS Credentials
        run: |-
          
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
      - if: \${{ matrix.assumeRole == 'true' && steps.deployment-check.outputs.has_active_deployment != 'true' }}
        name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - if: \${{ steps.deployment-check.outputs.has_active_deployment != 'true' }}
        name: Deployment
        run: yarn deploy:workflow
      - if: \${{ matrix.hasPostDeployTask == 'true' && steps.deployment-check.outputs.has_active_deployment != 'true' }}
        name: Post Deployment
        run: yarn \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
        environment:
          - dev
"
`;

exports[`specific stack release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - if: \${{ matrix.assumeRole == 'false' }}
        name: Configure AWS Credentials
        run: |-
          
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
      - if: \${{ matrix.assumeRole == 'true' }}
        name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Deployment
        run: yarn deploy:workflow
      - if: \${{ matrix.hasPostDeployTask == 'true' }}
        name: Post Deployment
        run: yarn \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
        environment:
          - dev
"
`;

exports[`specific stack tasks 1`] = `
"{
  \\"tasks\\": {
    \\"build\\": {
      \\"name\\": \\"build\\",
      \\"description\\": \\"Full release build\\",
      \\"steps\\": [
        {
          \\"spawn\\": \\"default\\"
        },
        {
          \\"spawn\\": \\"pre-compile\\"
        },
        {
          \\"spawn\\": \\"compile\\"
        },
        {
          \\"spawn\\": \\"post-compile\\"
        },
        {
          \\"spawn\\": \\"test\\"
        },
        {
          \\"spawn\\": \\"package\\"
        }
      ]
    },
    \\"bump\\": {
      \\"name\\": \\"bump\\",
      \\"description\\": \\"Bumps version based on latest git tag and generates a changelog entry\\",
      \\"env\\": {
        \\"OUTFILE\\": \\"package.json\\",
        \\"CHANGELOG\\": \\"dist/changelog.md\\",
        \\"BUMPFILE\\": \\"dist/version.txt\\",
        \\"RELEASETAG\\": \\"dist/releasetag.txt\\"
      },
      \\"steps\\": [
        {
          \\"builtin\\": \\"release/bump-version\\"
        }
      ],
      \\"condition\\": \\"! git log --oneline -1 | grep -q \\\\\\"chore(release):\\\\\\"\\"
    },
    \\"bundle\\": {
      \\"name\\": \\"bundle\\",
      \\"description\\": \\"Prepare assets\\"
    },
    \\"clobber\\": {
      \\"name\\": \\"clobber\\",
      \\"description\\": \\"hard resets to HEAD of origin and cleans the local repo\\",
      \\"env\\": {
        \\"BRANCH\\": \\"$(git branch --show-current)\\"
      },
      \\"steps\\": [
        {
          \\"exec\\": \\"git checkout -b scratch\\",
          \\"name\\": \\"save current HEAD in \\\\\\"scratch\\\\\\" branch\\"
        },
        {
          \\"exec\\": \\"git checkout $BRANCH\\"
        },
        {
          \\"exec\\": \\"git fetch origin\\",
          \\"name\\": \\"fetch latest changes from origin\\"
        },
        {
          \\"exec\\": \\"git reset --hard origin/$BRANCH\\",
          \\"name\\": \\"hard reset to origin commit\\"
        },
        {
          \\"exec\\": \\"git clean -fdx\\",
          \\"name\\": \\"clean all untracked files\\"
        },
        {
          \\"say\\": \\"ready to rock! (unpushed commits are under the \\\\\\"scratch\\\\\\" branch)\\"
        }
      ],
      \\"condition\\": \\"git diff --exit-code > /dev/null\\"
    },
    \\"compile\\": {
      \\"name\\": \\"compile\\",
      \\"description\\": \\"Only compile\\"
    },
    \\"default\\": {
      \\"name\\": \\"default\\",
      \\"description\\": \\"Synthesize project files\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"node .projenrc.js\\"
        }
      ]
    },
    \\"deploy\\": {
      \\"name\\": \\"deploy\\",
      \\"description\\": \\"Deploys your CDK app to the AWS cloud\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk deploy\\"
        }
      ]
    },
    \\"deploy:workflow\\": {
      \\"name\\": \\"deploy:workflow\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk deploy myStack --require-approval never\\"
        }
      ]
    },
    \\"destroy\\": {
      \\"name\\": \\"destroy\\",
      \\"description\\": \\"Destroys your cdk app in the AWS cloud\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk destroy\\"
        }
      ]
    },
    \\"diff\\": {
      \\"name\\": \\"diff\\",
      \\"description\\": \\"Diffs the currently deployed app against your code\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk diff\\"
        }
      ]
    },
    \\"eject\\": {
      \\"name\\": \\"eject\\",
      \\"description\\": \\"Remove projen from the project\\",
      \\"env\\": {
        \\"PROJEN_EJECTING\\": \\"true\\"
      },
      \\"steps\\": [
        {
          \\"spawn\\": \\"default\\"
        }
      ]
    },
    \\"eslint\\": {
      \\"name\\": \\"eslint\\",
      \\"description\\": \\"Runs eslint against the codebase\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js\\"
        }
      ]
    },
    \\"package\\": {
      \\"name\\": \\"package\\",
      \\"description\\": \\"Creates the distribution package\\"
    },
    \\"post-compile\\": {
      \\"name\\": \\"post-compile\\",
      \\"description\\": \\"Runs after successful compilation\\",
      \\"steps\\": [
        {
          \\"spawn\\": \\"synth:silent\\"
        }
      ]
    },
    \\"post-upgrade\\": {
      \\"name\\": \\"post-upgrade\\",
      \\"description\\": \\"Runs after upgrading dependencies\\"
    },
    \\"pre-compile\\": {
      \\"name\\": \\"pre-compile\\",
      \\"description\\": \\"Prepare the project for compilation\\"
    },
    \\"release\\": {
      \\"name\\": \\"release\\",
      \\"description\\": \\"Prepare a release from \\\\\\"main\\\\\\" branch\\",
      \\"env\\": {
        \\"RELEASE\\": \\"true\\"
      },
      \\"steps\\": [
        {
          \\"exec\\": \\"rm -fr dist\\"
        },
        {
          \\"spawn\\": \\"bump\\"
        },
        {
          \\"spawn\\": \\"build\\"
        },
        {
          \\"spawn\\": \\"unbump\\"
        },
        {
          \\"exec\\": \\"git diff --ignore-space-at-eol --exit-code\\"
        }
      ]
    },
    \\"synth\\": {
      \\"name\\": \\"synth\\",
      \\"description\\": \\"Synthesizes your cdk app into cdk.out\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk synth\\"
        }
      ]
    },
    \\"synth:silent\\": {
      \\"name\\": \\"synth:silent\\",
      \\"description\\": \\"Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \\\\\\"yarn build\\\\\\")\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk synth > /dev/null\\"
        }
      ]
    },
    \\"test\\": {
      \\"name\\": \\"test\\",
      \\"description\\": \\"Run tests\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"jest --passWithNoTests --all --updateSnapshot\\"
        },
        {
          \\"spawn\\": \\"eslint\\"
        }
      ]
    },
    \\"test:update\\": {
      \\"name\\": \\"test:update\\",
      \\"description\\": \\"Update jest snapshots\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"jest --updateSnapshot\\"
        }
      ]
    },
    \\"test:watch\\": {
      \\"name\\": \\"test:watch\\",
      \\"description\\": \\"Run jest in watch mode\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"jest --watch\\"
        }
      ]
    },
    \\"unbump\\": {
      \\"name\\": \\"unbump\\",
      \\"description\\": \\"Restores version to 0.0.0\\",
      \\"env\\": {
        \\"OUTFILE\\": \\"package.json\\",
        \\"CHANGELOG\\": \\"dist/changelog.md\\",
        \\"BUMPFILE\\": \\"dist/version.txt\\",
        \\"RELEASETAG\\": \\"dist/releasetag.txt\\"
      },
      \\"steps\\": [
        {
          \\"builtin\\": \\"release/reset-version\\"
        }
      ]
    },
    \\"upgrade\\": {
      \\"name\\": \\"upgrade\\",
      \\"description\\": \\"upgrade dependencies\\",
      \\"env\\": {
        \\"CI\\": \\"0\\"
      },
      \\"steps\\": [
        {
          \\"exec\\": \\"npm-check-updates --dep dev --upgrade --target=minor --reject='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep optional --upgrade --target=minor --reject='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep peer --upgrade --target=minor --reject='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep prod --upgrade --target=minor --reject='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep bundle --upgrade --target=minor --reject='projen'\\"
        },
        {
          \\"exec\\": \\"yarn install --check-files\\"
        },
        {
          \\"exec\\": \\"yarn upgrade @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk esbuild eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit json-schema npm-check-updates standard-version ts-jest ts-node typescript @aws-cdk/core constructs @aws-cdk/assert @aws-cdk/assertions\\"
        },
        {
          \\"exec\\": \\"npx projen\\"
        },
        {
          \\"spawn\\": \\"post-upgrade\\"
        }
      ]
    },
    \\"upgrade-projen\\": {
      \\"name\\": \\"upgrade-projen\\",
      \\"description\\": \\"upgrade projen\\",
      \\"env\\": {
        \\"CI\\": \\"0\\"
      },
      \\"steps\\": [
        {
          \\"exec\\": \\"npm-check-updates --dep dev --upgrade --target=minor --filter='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep optional --upgrade --target=minor --filter='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep peer --upgrade --target=minor --filter='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep prod --upgrade --target=minor --filter='projen'\\"
        },
        {
          \\"exec\\": \\"npm-check-updates --dep bundle --upgrade --target=minor --filter='projen'\\"
        },
        {
          \\"exec\\": \\"yarn install --check-files\\"
        },
        {
          \\"exec\\": \\"yarn upgrade projen\\"
        },
        {
          \\"exec\\": \\"npx projen\\"
        },
        {
          \\"spawn\\": \\"post-upgrade\\"
        }
      ]
    },
    \\"watch\\": {
      \\"name\\": \\"watch\\",
      \\"description\\": \\"Watches changes in your source code and rebuilds and deploys to the current account\\",
      \\"steps\\": [
        {
          \\"exec\\": \\"cdk deploy --hotswap\\"
        },
        {
          \\"exec\\": \\"cdk watch\\"
        }
      ]
    }
  },
  \\"env\\": {
    \\"PATH\\": \\"$(npx -c \\\\\\"node -e \\\\\\\\\\\\\\"console.log(process.env.PATH)\\\\\\\\\\\\\\"\\\\\\")\\"
  },
  \\"//\\": \\"~~ Generated by projen. To modify, edit .projenrc.js and run \\\\\\"npx projen\\\\\\".\\"
}
"
`;
