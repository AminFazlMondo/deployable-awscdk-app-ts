// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CodeArtifactOptions GitHub OIDC auth provider release workflow should not contain aws secrets 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-2
          role-to-assume: stub-role-1
          role-duration-seconds: 900
      - name: AWS CodeArtifact Login
        run: npm run ca:login
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-2
          role-to-assume: stub-role-1
          role-duration-seconds: 900
      - name: AWS CodeArtifact Login
        run: npm run ca:login
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev1
            accessKeyIdSecretName: AWS_ACCESS_KEY_ID
            secretAccessKeySecretName: AWS_SECRET_ACCESS_KEY
            region: dev-aws-region-1
            assumeRole: \\"true\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
            roleToAssume: stub-role-2
            assumeRoleDurationSeconds: 900
        environment:
          - dev1
"
`;

exports[`No stack pattern release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
          - environment: staging
            accessKeyIdSecretName: staging-secret-1
            secretAccessKeySecretName: staging-secret-2
            region: staging-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
        environment:
          - dev
          - staging
"
`;

exports[`a new task added for deployment in workflow tasks 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(npx -c \\"node -e \\\\\\"console.log(process.env.PATH)\\\\\\"\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "default",
        },
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "bump": Object {
      "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "bump",
      "steps": Array [
        Object {
          "builtin": "release/bump-version",
        },
      ],
    },
    "bundle": Object {
      "description": "Prepare assets",
      "name": "bundle",
    },
    "clobber": Object {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": Object {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": Array [
        Object {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \\"scratch\\" branch",
        },
        Object {
          "exec": "git checkout $BRANCH",
        },
        Object {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        Object {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        Object {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        Object {
          "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
      "steps": Array [
        Object {
          "exec": "node .projenrc.js",
        },
      ],
    },
    "deploy": Object {
      "description": "Deploys your CDK app to the AWS cloud",
      "name": "deploy",
      "steps": Array [
        Object {
          "exec": "cdk deploy",
          "receiveArgs": true,
        },
      ],
    },
    "deploy:workflow": Object {
      "name": "deploy:workflow",
      "steps": Array [
        Object {
          "exec": "cdk deploy --require-approval never",
        },
      ],
    },
    "destroy": Object {
      "description": "Destroys your cdk app in the AWS cloud",
      "name": "destroy",
      "steps": Array [
        Object {
          "exec": "cdk destroy",
          "receiveArgs": true,
        },
      ],
    },
    "diff": Object {
      "description": "Diffs the currently deployed app against your code",
      "name": "diff",
      "steps": Array [
        Object {
          "exec": "cdk diff",
        },
      ],
    },
    "eject": Object {
      "description": "Remove projen from the project",
      "env": Object {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": Array [
        Object {
          "spawn": "default",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js",
        },
      ],
    },
    "install": Object {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": Array [
        Object {
          "exec": "npm install",
        },
      ],
    },
    "install:ci": Object {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": Array [
        Object {
          "exec": "npm ci",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
      "steps": Array [
        Object {
          "spawn": "synth:silent",
        },
      ],
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "release": Object {
      "description": "Prepare a release from \\"main\\" branch",
      "env": Object {
        "RELEASE": "true",
      },
      "name": "release",
      "steps": Array [
        Object {
          "exec": "rm -fr dist",
        },
        Object {
          "spawn": "bump",
        },
        Object {
          "spawn": "build",
        },
        Object {
          "spawn": "unbump",
        },
        Object {
          "exec": "git diff --ignore-space-at-eol --exit-code",
        },
      ],
    },
    "synth": Object {
      "description": "Synthesizes your cdk app into cdk.out",
      "name": "synth",
      "steps": Array [
        Object {
          "exec": "cdk synth",
        },
      ],
    },
    "synth:silent": Object {
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \\"yarn build\\")",
      "name": "synth:silent",
      "steps": Array [
        Object {
          "exec": "cdk synth -q",
        },
      ],
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "unbump": Object {
      "description": "Restores version to 0.0.0",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "unbump",
      "steps": Array [
        Object {
          "builtin": "release/reset-version",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "npm update npm-check-updates",
        },
        Object {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
        },
        Object {
          "exec": "npm install",
        },
        Object {
          "exec": "npm update",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
    "watch": Object {
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "name": "watch",
      "steps": Array [
        Object {
          "exec": "cdk deploy --hotswap",
        },
        Object {
          "exec": "cdk watch",
        },
      ],
    },
  },
}
`;

exports[`assume role with default duration release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"true\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
            roleToAssume: dev-role
            assumeRoleDurationSeconds: 900
        environment:
          - dev
"
`;

exports[`assume role with specified duration release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"true\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
            roleToAssume: dev-role
            assumeRoleDurationSeconds: 1200
        environment:
          - dev
"
`;

exports[`environment added by invoking the addEnvironments release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
          - environment: staging
            accessKeyIdSecretName: staging-secret-1
            secretAccessKeySecretName: staging-secret-2
            region: staging-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
        environment:
          - dev
          - staging
"
`;

exports[`npm config set for each environments deploy:workflow task should have requiredEnv 1`] = `
Object {
  "name": "deploy:workflow",
  "requiredEnv": Array [
    "npm_config_stage",
  ],
  "steps": Array [
    Object {
      "exec": "cdk deploy --require-approval never",
    },
  ],
}
`;

exports[`npm config set for each environments release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Setting NPM Config
        env:
          CONFIG_VALUE: \${{ matrix.environment }}
        run: npm config set stage $CONFIG_VALUE
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
          - environment: staging
            accessKeyIdSecretName: staging-secret-1
            secretAccessKeySecretName: staging-secret-2
            region: staging-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
        environment:
          - dev
          - staging
"
`;

exports[`post deployment added in workflow release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev1
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"true\\"
            postDeploymentScript: post-deploy
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
          - environment: dev2
            accessKeyIdSecretName: dev-secret-3
            secretAccessKeySecretName: dev-secret-4
            region: dev-aws-region-2
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
        environment:
          - dev1
          - dev2
"
`;

exports[`pre deployment added in workflow tasks 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev1
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"true\\"
            preDeploymentScript: pre-deploy
          - environment: dev2
            accessKeyIdSecretName: dev-secret-3
            secretAccessKeySecretName: dev-secret-4
            region: dev-aws-region-2
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
        environment:
          - dev1
          - dev2
"
`;

exports[`pre install added in workflow tasks 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: stub-task
        run: npx projen stub-task
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev1
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
        environment:
          - dev1
"
`;

exports[`scoped packages exists release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          role-to-assume: stub-role-1
          role-duration-seconds: 900
      - name: AWS CodeArtifact Login
        run: npm run ca:login
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          role-to-assume: stub-role-1
          role-duration-seconds: 900
      - name: AWS CodeArtifact Login
        run: npm run ca:login
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev1
            accessKeyIdSecretName: AWS_ACCESS_KEY_ID
            secretAccessKeySecretName: AWS_SECRET_ACCESS_KEY
            region: dev-aws-region-1
            assumeRole: \\"true\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
            roleToAssume: stub-role-2
            assumeRoleDurationSeconds: 900
        environment:
          - dev1
"
`;

exports[`set the checkActiveDeployment flag release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - id: deployment-check
        uses: AminFazlMondo/check-deployed-environment@v1
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          environment: \${{ matrix.environment }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' && steps.deployment-check.outputs.has_active_deployment != 'true' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' && steps.deployment-check.outputs.has_active_deployment != 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' && steps.deployment-check.outputs.has_active_deployment != 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        if: \${{ steps.deployment-check.outputs.has_active_deployment != 'true' }}
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' && steps.deployment-check.outputs.has_active_deployment != 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
        environment:
          - dev
"
`;

exports[`specific stack release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: npm ci
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: \${{ matrix.environment }}-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.sha }}
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        if: \${{ matrix.assumeRole == 'false' }}
        env:
          accessKeyId: \${{ secrets[matrix.accessKeyIdSecretName] }}
          secretAccessKey: \${{ secrets[matrix.secretAccessKeySecretName] }}
          region: \${{ matrix.region }}
        run: |-
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Assume AWS Role
        if: \${{ matrix.assumeRole == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: \${{ secrets[matrix.accessKeyIdSecretName] }}
          aws-secret-access-key: \${{ secrets[matrix.secretAccessKeySecretName] }}
          role-to-assume: \${{ matrix.roleToAssume }}
          aws-region: \${{ matrix.region }}
          role-duration-seconds: \${{ matrix.assumeRoleDurationSeconds }}
      - name: Pre Deployment
        if: \${{ matrix.hasPreDeployTask == 'true' }}
        run: npm run \${{ matrix.preDeploymentScript }}
      - name: Deployment
        run: npm run deploy:workflow
      - name: Post Deployment
        if: \${{ matrix.hasPostDeployTask == 'true' }}
        run: npm run \${{ matrix.postDeploymentScript }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
            accessKeyIdSecretName: dev-secret-1
            secretAccessKeySecretName: dev-secret-2
            region: dev-aws-region-1
            assumeRole: \\"false\\"
            hasPostDeployTask: \\"false\\"
            postDeploymentScript: \\"\\"
            hasPreDeployTask: \\"false\\"
            preDeploymentScript: \\"\\"
        environment:
          - dev
"
`;

exports[`specific stack tasks 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(npx -c \\"node -e \\\\\\"console.log(process.env.PATH)\\\\\\"\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "default",
        },
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "bump": Object {
      "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "bump",
      "steps": Array [
        Object {
          "builtin": "release/bump-version",
        },
      ],
    },
    "bundle": Object {
      "description": "Prepare assets",
      "name": "bundle",
    },
    "clobber": Object {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": Object {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": Array [
        Object {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \\"scratch\\" branch",
        },
        Object {
          "exec": "git checkout $BRANCH",
        },
        Object {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        Object {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        Object {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        Object {
          "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
      "steps": Array [
        Object {
          "exec": "node .projenrc.js",
        },
      ],
    },
    "deploy": Object {
      "description": "Deploys your CDK app to the AWS cloud",
      "name": "deploy",
      "steps": Array [
        Object {
          "exec": "cdk deploy",
          "receiveArgs": true,
        },
      ],
    },
    "deploy:workflow": Object {
      "name": "deploy:workflow",
      "steps": Array [
        Object {
          "exec": "cdk deploy myStack --require-approval never",
        },
      ],
    },
    "destroy": Object {
      "description": "Destroys your cdk app in the AWS cloud",
      "name": "destroy",
      "steps": Array [
        Object {
          "exec": "cdk destroy",
          "receiveArgs": true,
        },
      ],
    },
    "diff": Object {
      "description": "Diffs the currently deployed app against your code",
      "name": "diff",
      "steps": Array [
        Object {
          "exec": "cdk diff",
        },
      ],
    },
    "eject": Object {
      "description": "Remove projen from the project",
      "env": Object {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": Array [
        Object {
          "spawn": "default",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js",
        },
      ],
    },
    "install": Object {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": Array [
        Object {
          "exec": "npm install",
        },
      ],
    },
    "install:ci": Object {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": Array [
        Object {
          "exec": "npm ci",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
      "steps": Array [
        Object {
          "spawn": "synth:silent",
        },
      ],
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "release": Object {
      "description": "Prepare a release from \\"main\\" branch",
      "env": Object {
        "RELEASE": "true",
      },
      "name": "release",
      "steps": Array [
        Object {
          "exec": "rm -fr dist",
        },
        Object {
          "spawn": "bump",
        },
        Object {
          "spawn": "build",
        },
        Object {
          "spawn": "unbump",
        },
        Object {
          "exec": "git diff --ignore-space-at-eol --exit-code",
        },
      ],
    },
    "synth": Object {
      "description": "Synthesizes your cdk app into cdk.out",
      "name": "synth",
      "steps": Array [
        Object {
          "exec": "cdk synth",
        },
      ],
    },
    "synth:silent": Object {
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \\"yarn build\\")",
      "name": "synth:silent",
      "steps": Array [
        Object {
          "exec": "cdk synth -q",
        },
      ],
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "unbump": Object {
      "description": "Restores version to 0.0.0",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "unbump",
      "steps": Array [
        Object {
          "builtin": "release/reset-version",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "npm update npm-check-updates",
        },
        Object {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor",
        },
        Object {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
        },
        Object {
          "exec": "npm install",
        },
        Object {
          "exec": "npm update",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
    "watch": Object {
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "name": "watch",
      "steps": Array [
        Object {
          "exec": "cdk deploy --hotswap",
        },
        Object {
          "exec": "cdk watch",
        },
      ],
    },
  },
}
`;
