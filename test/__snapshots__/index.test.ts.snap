// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`No stack pattern release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R
          $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt)
          --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode
          -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then
          cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.18.1
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        run: |-
          
          accessKeyId='\${{ secrets.secret-1 }}'
          echo \\"::add-mask::$accessKeyId\\"
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          secretAccessKey='\${{ secrets.secret-2 }}'
          echo \\"::add-mask::$secretAccessKey\\"
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          region=aws-region-1
          echo \\"::add-mask::$region\\"
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Deployment
        run: npx projen deploy
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
          - environment: staging
"
`;

exports[`assume role with default duration release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R
          $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt)
          --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode
          -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then
          cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \\"'\${{ secrets.secret-1 }}'\\"
          aws-secret-access-key: \\"'\${{ secrets.secret-2 }}'\\"
          role-to-assume: role-arn-1
          aws-region: aws-region-1
          role-duration-seconds: 300
      - name: Deployment
        run: npx projen deploy myStack
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
"
`;

exports[`assume role with specified duration release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R
          $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt)
          --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode
          -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then
          cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: \\"'\${{ secrets.secret-1 }}'\\"
          aws-secret-access-key: \\"'\${{ secrets.secret-2 }}'\\"
          role-to-assume: role-arn-1
          aws-region: aws-region-1
          role-duration-seconds: 1200
      - name: Deployment
        run: npx projen deploy myStack
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
"
`;

exports[`specific stack release workflow 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R
          $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt)
          --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode
          -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then
          cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  deploy:
    needs: release_github
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment:
      name: \${{ matrix.environment }}
    concurrency: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: \${{ github.sha }}
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        run: |-
          
          accessKeyId=secret-1
          echo \\"::add-mask::$accessKeyId\\"
          echo \\"AWS_ACCESS_KEY_ID=$accessKeyId\\" >> $GITHUB_ENV
          secretAccessKey=secret-2
          echo \\"::add-mask::$secretAccessKey\\"
          echo \\"AWS_SECRET_ACCESS_KEY=$secretAccessKey\\" >> $GITHUB_ENV
          region=aws-region-1
          echo \\"::add-mask::$region\\"
          echo \\"AWS_REGION=$region\\" >> $GITHUB_ENV
      - name: Deployment
        run: npx projen deploy myStack
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: dev
"
`;
